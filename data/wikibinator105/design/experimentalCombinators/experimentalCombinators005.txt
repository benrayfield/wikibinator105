Just do the CLEAN forms for now, as DIRTY mostly mirrors it.

These will be typed functions made of ax, which any 2 of them, one called on the other, returns another one of them in bigo1 if we count the equals function as bigo1 which it is if optimized by id (such as by sha3 merkle hashing) but its not bigo1 if using lazy ids but would only do that where its an optimization so effectively its bigo1. Its perfect dedup and bigo1 if put everything up to 512 bits in a hashtable and lazy create ids of call pairs upward from those (so dont create ids for most call pairs), but hashtables are slower than copying ranges of memory etc, so theres various ways to tune and optimize it. Just count on the ability to call java.lang.Object.equals(Object) on functions in bigO(1) but its a big constant multiplier of that bigO(1) compared to if you use == with hashtable for lazy dedup which is the normal way to do it, and perfect dedup as needed.

Might need opByte and maybe a few other bits, to be part of color?

Want to define the nsat (or preferably, just make it of nands) level, of the proof vs anything-except-proof colors, of these bigo1 ops. The bloomfilter (stored sparsely in these forests with a few bits of bloomfilter in each (where all contradictions occur within the bits inside a single node, as it cant be more than 1 color). Thats just one way to compute it, and GPU optimizations will fit seamlessly with that.
Callquads, which are used in occamsfuncer, do the debugStepOver etc (simulate the stack on the heap, statelessly), BUT callquads are less self referencing than wikibinator105 cuz a lambda cant see a nonhalted callquad cuz a callquad is a simulation of the stack state computing those lambdas. I want to fix that in some funcs I'll design using the existing wikibinator105 math especially Op.ax and Op.fpr.
Whatever I come up with here, anyone could create a competing model of debug steps etc, using the same wikibinator105 u/leaf/universalFunction. It can derive new kinds of opcodes at runtime, though for now it doesnt optimize them automatically but it will in many turing complete patterns later.
I need it to be similar to callquad but to fix that self reference problem in it. I've already fixed the self reference problem in the wikibinator105 universal function, so all I need to do to fix the self reference in callquads is to build callquads using wikibinator105 in a way that they can view eachother both lazyeval or eagereval forms, or something like that.
Callquad's childs are: func, param, stack, cacheKey, isParentsFunc, isHalted, isLeaf, so 4 pointers and a few bits. I might have missed some of the other bits.

Use Op.curry instead of Op.infcur. Old[ Might want to use Op.infcur to store the fields similar to func param stack cacheKey isParentsFunc isHalted etc, of the variant of callquads, and put that in some kind of wrapper in an ax call, where the wrapper uses the behavior of ax that (ax wrapper param)->(wrapper (t param)) aka ->(wrapper ,param), if (wrapper u) halts which is where the color of (ax wrapper) comes from. Or instead of Op.infcur, could use Op.curry since we know it will be a specific number of curries, and that can be the wrapper also, and can call itself recursively and call that inside an ax. ]
Something like...
(ax {,curry ...stuff...})
where (ax {,curry ...stuff...} param) -> (ax {,curry ...otherStuff...}),
where param is another (ax {,curry ...someStuff...}).
Thats how typed functions work. You can still call anything on anything, and in that way its untyped, but its typed in that it can in turingComplete ways guarantee to only return certain types or certain patterns of types creating new types at runtime. Its typed in the return values, untyped in the params.

u - leaf
ax - axiomOp, where (ax y)'s color is proof if (y u)->u, is color disproof if that returns something other than u, and is color wordsalad if that doesnt halt and therefore (ax y) doesnt halt. Colors other than wordsalad can be measured by lambdas as wordsalad is nonhalting. Color wordsalad will therefore never be generated by lambdas but can be seen at the nsat level in some cases (halting oracles are impossible, of course).
dsi - debugStepIntoOrOverIfAlreadyDeepest
dso - debugStepOver

(dso 


